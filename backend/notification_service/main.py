import os
import asyncio
import json
from aio_pika import connect_robust, IncomingMessage
from dotenv import load_dotenv
import httpx

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RABBITMQ_URL = os.getenv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq/")
QUEUE_NAME = os.getenv("QUEUE_NAME", "parcel_status_updates")


async def send_telegram_message(telegram_id: int, message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": telegram_id,
        "text": message
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def handle_message(message: IncomingMessage):
    async with message.process():
        try:
            data = json.loads(message.body.decode())
            telegram_id = data["telegram_id"]
            tracking_number = data["tracking_number"]
            status = data["new_status"]
            carrier = data.get("carrier", "Unknown")
            last_update = data.get("last_update", "")

            text = (
                f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ `{tracking_number}`\n\n"
                f"üóÇ –°—Ç–∞—Ç—É—Å: *{status.upper()}*\n"
                f"üöõ –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫: {carrier}\n"
                f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update}"
            )

            await send_telegram_message(telegram_id, text)
            print(f"[+] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    print("[*] Notification service –∑–∞–ø—É—â–µ–Ω.", flush=True)
    connection = await connect_robust(RABBITMQ_URL)
    channel = await connection.channel()
    queue = await channel.declare_queue(QUEUE_NAME, durable=True)
    print(f"[*] –°–ª—É—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å {QUEUE_NAME}...", flush=True)

    await queue.consume(handle_message)
    await asyncio.Future()


if __name__ == "__main__":
    asyncio.run(main())
