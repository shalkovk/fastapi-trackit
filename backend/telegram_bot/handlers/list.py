from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import httpx
import os
from redis_client import redis_client as redis


router = Router()

TRACKING_SERVICE_URL = os.getenv(
    "TRACKING_SERVICE_URL", "http://tracking_service:8001")


@router.message(Command("list"))
async def list_handler(message: Message):
    telegram_id = message.from_user.id
    token = await redis.get(f"token:{telegram_id}")
    if not token:
        await message.answer(f"–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start")
        return

    header = {
        "Authorization": f"Bearer {token}"
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{TRACKING_SERVICE_URL}/parcels/list", headers=header)
        if response.status_code == 200:
            parcels = response.json()
            if not parcels:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.")
                return

            text = "–í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏:\n"
            for parcel in parcels:
                text += f"üì¶ {parcel['tracking_number']} ‚Äî {parcel.get('status')}\n"
            await message.answer(text)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ tracking-—Å–µ—Ä–≤–∏—Å—É:\n{str(e)}")
